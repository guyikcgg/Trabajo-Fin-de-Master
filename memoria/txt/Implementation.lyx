#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\use_default_options true
\master content.lyx
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Part
Implementación
\end_layout

\begin_layout Chapter
Análisis de requisitos y viabilidad
\end_layout

\begin_layout Section
Descripción del sistema
\end_layout

\begin_layout Subsection
Arquitectura (objetivo perseguido)
\end_layout

\begin_layout Standard
Se pretende conectar una red de sensores a un gateway, y de ahí a AWS a
 través del protocolo MQTT con la capa segura TLS.
 El gw y AWS deberán autenticarse con certificados digitales.
\end_layout

\begin_layout Standard
[imagen bonita de la arquitectura]
\end_layout

\begin_layout Standard
tenemos red de sensores, gw
\end_layout

\begin_layout Subsection
\begin_inset Quotes fld
\end_inset

Sistema objetivo
\begin_inset Quotes frd
\end_inset


\end_layout

\begin_layout Standard
Descripción del GW:
\end_layout

\begin_layout Standard
Software: CMSIS-RTOS y lwIP
\end_layout

\begin_layout Standard
Hardware:
\end_layout

\begin_layout Standard
RAM
\end_layout

\begin_layout Standard
Flash
\end_layout

\begin_layout Standard
TDA
\end_layout

\begin_layout Standard
Generador de números aleatorios
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
La nube de Amazon IoT
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Brevemente, ya ha sido descrita en cap 2
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Identificar elementos físicos con nombres de Amazon
\end_layout

\begin_layout Section
Análisis de requisitos
\end_layout

\begin_layout Subsection
Funcionales
\end_layout

\begin_layout Subsection
No funcionales
\end_layout

\begin_layout Section
Análisis de diferentes bibliotecas TLS
\end_layout

\begin_layout Subsection
mbedTLS
\end_layout

\begin_layout Subsection
WolfSSL
\end_layout

\begin_layout Subsection
Otras
\end_layout

\begin_layout Subsection
Elección de la biblioteca
\end_layout

\begin_layout Standard
Tras valorar estas opciones, decidimos mbedTLS por los siguientes motivos:
\end_layout

\begin_layout Chapter
Implementación de TLS
\end_layout

\begin_layout Standard
Pasamos a la implementación del protocolo TLS.
 La biblioteca con la que se llevaará a cabo es mbedTLS.
 Sobre la metodología: Primero se evaluarán las bibliotecas en PC y luego
 se pasarán al XMC.
\end_layout

\begin_layout Standard
A continuación: Descripción detallada de la biblioteca mbedTLS
\end_layout

\begin_layout Section
Arquitectura de la biblioteca
\end_layout

\begin_layout Subsection
Estructura de ficheros
\end_layout

\begin_layout Subsection
Funciones principales (socket, verificación de certificados, etc)
\end_layout

\begin_layout Subsection
etc.
\end_layout

\begin_layout Standard
Ejemplo cliente-servidor sencillo (Anexo)
\end_layout

\begin_layout Section
Proceso de compilación
\end_layout

\begin_layout Standard
Compila en Linux sin problema, usando la herramienta Make.
 También viene con un proyecto en Visual Studio para compilar en Windows.
 Todos los ficheros tienen muchas directivas para el preprocesador, para
 detectar el entorno y compilar correctamente.
\end_layout

\begin_layout Standard
Configuración de la biblioteca (script de Perl).
 Make y Cmake (cambiar parámetros / flags de compilación).
 Una vez compilada, se pueden pasar tests.
 Programas de ejemplo ilustrativos.
\end_layout

\begin_layout Section
Portando a otras plataformas
\end_layout

\begin_layout Subsection
Elementos que se deben portar/se deben considerar
\end_layout

\begin_layout Standard
Los ficheros de plataforma!!
\end_layout

\begin_layout Subsubsection
Generador de números aleatorios
\end_layout

\begin_layout Subsubsection
etc.
\end_layout

\begin_layout Subsection
Toolchain
\end_layout

\begin_layout Standard
Usar Defines custom y make!
\end_layout

\begin_layout Section
Portando mbedTLS a XMC con CMSIS-RTOS
\end_layout

\begin_layout Standard
Hablar del montaje en el laboratorio (PC como bridge, switch, intranet,
 Internet)
\end_layout

\begin_layout Subsection
Entorno de trabajo: DAVE
\end_layout

\begin_layout Standard
IDE basado en Eclipse
\end_layout

\begin_layout Standard
Ventaja: programación con las cajitas (configuran el hw + bibliotecas)
\end_layout

\begin_layout Standard
Qué tenemos? 
\end_layout

\begin_layout Standard
CMSIS-RTOS (version)
\end_layout

\begin_layout Standard
lwip (version)
\end_layout

\begin_layout Standard
Se usa make por debajo, pero lo genera DAVE automáticamente
\end_layout

\begin_layout Subsection
Elementos portados
\end_layout

\begin_layout Subsubsection
Generador de números aleatorios
\end_layout

\begin_layout Standard
Basado en HW.
 Testeado.
\end_layout

\begin_layout Subsubsection
lwIP (Actualización de lwIP)
\end_layout

\begin_layout Standard
Se han usado parches y mucho git.
\end_layout

\begin_layout Subsection
Importación de los ficheros mbedTLS
\end_layout

\begin_layout Standard
herramienta 
\begin_inset Quotes fld
\end_inset

bibliotecas con referencias
\begin_inset Quotes frd
\end_inset

 de DAVE
\end_layout

\begin_layout Subsection
Modificación del mapa de memoria
\end_layout

\begin_layout Standard
Se usa heap, ya que no es un sistema crítico.
 Hemos tenido que aumentar el tamaño del heap en el linkerscript
\end_layout

\begin_layout Subsection
Tests
\end_layout

\begin_layout Standard
Se consigue crear comunicación cifrada entre un servidor sencillo basado
 en OpenSSL y un programa de ejemplo.
\end_layout

\begin_layout Chapter
Implementación de MQTT
\end_layout

\end_body
\end_document
