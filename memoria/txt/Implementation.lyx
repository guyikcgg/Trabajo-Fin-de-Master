#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\use_default_options true
\master content.lyx
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Part
Trabajo realizado
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Descripción-del-sistema"

\end_inset

Presentación del sistema
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Breve introducción de la Parte II
\end_layout

\end_inset

 Una vez revisados los fundamentos teóricos y las tecnologías usadas en
 la realización de este trabajo, pasaremos a 
\end_layout

\begin_layout Standard
En este capítulo describiremos con detalle el funcionamiento general del
 sistema y cada uno de los elementos que lo forman.
 En primer lugar, presentaremos la estructura general del sistema, profundizando
 en la función llevada a cabo por cada uno de los elementos que lo forman.
 A continuación, describiremos estos elementos en mayor profundidad, a fin
 de comprender mejor los detalles de la posterior implementación.
\end_layout

\begin_layout Standard
Comenzaremos por introducir 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
dave
\end_layout

\end_inset

, el entorno de desarrollo integrado (IDE) proporcionado por Infineon para
 trabajar con sus microcontroladores 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
xmc
\end_layout

\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "infineon:DAVE"

\end_inset

.
 Será este IDE el que usaremos para editar el código fuente, compilar el
 proyecto y cargar el firmware en el dispositivo.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
una breve reseña sobre el entorno de trabajo y el workflow
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Entorno-de-trabajo"

\end_inset

El entorno de trabajo 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
DAVE
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Trabajar con microcontroladores supone editar código fuente, compilarlo
 a la plataforma de destino, cargar el firmware en el dispositivo y depurar
 el programa en tiempo de ejecución.
 Esto puede hacerse de diferentes formas, usando distintos flujos de trabajo.
 Una de las más populares es usar un entorno de desarrollo integrado (IDE),
 que reúna las herramientas necesarias para llevar a cabo estas tareas.
 En la realización de este trabajo, hemos usado 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
DAVE
\end_layout

\end_inset

 en su versión 4.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
DAVE
\end_layout

\end_inset

 es un IDE profesional y gratuito con el cuál podemos llevar a cabo todo
 el proceso de desarrollo, desde la evaluación hasta la producción (E2P)
 
\begin_inset CommandInset citation
LatexCommand cite
key "infineon:DAVE"

\end_inset

.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
DAVE
\end_layout

\end_inset

 está basado en el conocido IDE de código abierto Eclipse, e incluye el
 compilador de C de GNU (GCC), interfaz de depuración, repositorio de código
 completo, plug-in de generación de código y administración de recursos
 de hardware.
\end_layout

\begin_layout Standard
Como peculiaridad, resaltaremos que esta IDE incluye las denominadas 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
DAVE
\end_layout

\end_inset

 APPs, que son componentes software orientados a aplicación que pueden configura
rse a través de una interfaz gráfica de usuario (GUI).
 Gracias a las mismas, es posible usar muchos de los módulos del microcontrolado
r de forma sencilla y eficiente.
 Al añadir una de estas APPs al proyecto, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
DAVE
\end_layout

\end_inset

 importa el código necesario para usar la biblioteca o módulo hardware proporcio
nados por la misma, colocando los ficheros de la biblioteca en un directorio
 reservado a tal efecto.
 Asímismo, las APPs proporcionan una API homogénea para acceder a los distintos
 recursos del microcontrolador, y están ampliamente documentadas.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/XMC-portfolio.png
	lyxscale 20
	width 75col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Componentes-DAVE"

\end_inset

Componentes de 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
DAVE
\end_layout

\end_inset

 y flujo de trabajo.
 
\begin_inset CommandInset citation
LatexCommand cite
key "infineon:DAVE"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
La 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Componentes-DAVE"

\end_inset

 muestra los distintos componentes de 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
DAVE
\end_layout

\end_inset

, situando las 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
DAVE
\end_layout

\end_inset

 APPs en el entorno del IDE, además del flujo de trabajo E2P que puede obtenerse
 con el mismo.
 Como puede comprobarse en la misma, las 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
DAVE
\end_layout

\end_inset

 APPs se apoyan en la 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
XMC
\end_layout

\end_inset

 Lib, que proporciona acceso a los distintos elementos del microcontrolador
 en un nivel más cercano a la máquina.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
DAVE
\end_layout

\end_inset

 se encarga de gestionar el proceso de compilación, usando GCC con los parámetro
s definidos en la configuración del proyecto.
 Como Eclipse, permite excluir algunos directorios o ficheros del proceso
 de compilación.
 Al final de este proceso, se genera un archivo binario con la extensión
 .bin #! que se ajusta a las regiones de memoria definidas en el linker script.
 Para concluir el proceso, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
DAVE
\end_layout

\end_inset

 permite cargar el binario en los microcontroladores 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
XMC
\end_layout

\end_inset

 conectándose al mismo a través de un programador con el bus JTAG.
 El firmware cargado puede depurarse haciendo uso de la interfaz gráfica
 de depuración de 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
DAVE
\end_layout

\end_inset

, la cuál se muestra por defecto después de cada programación.
\end_layout

\begin_layout Section
Objetivo perseguido y arquitectura propuesta
\end_layout

\begin_layout Standard
Producto final: SmartHome products.
 It enables the user to remotely control, manage and monitor connected devices
 at home.
 Para ello 
\end_layout

\begin_layout Standard
Se pretende conectar una red de sensores a un gateway, y de ahí a AWS a
 través del protocolo MQTT con la capa segura TLS.
 El gw y AWS deberán autenticarse con certificados digitales.
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Arquitectura-del-sistema"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/esquema-general.eps
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Arquitectura-del-sistema"

\end_inset

Arquitectura general del sistema.
 Las líneas discontinuas representan la conexión inalámbrica a través del
 protocolo propietario de eesy-innovation.
 Las líneas continuas representan conexión IP.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
tenemos red de sensores, gw, Cloud y terminal (App)
\end_layout

\end_inset


\end_layout

\begin_layout Description
miniGW
\begin_inset Index idx
status open

\begin_layout Plain Layout
miniGW
\end_layout

\end_inset

 pasarela IoT, cuya función es comunicar la red de sensores con la nube
 de forma confiable, segura y eficiente.
 También está encargada de almacenar algunos elementos de configuración.
\end_layout

\begin_layout Description
Red
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

sensores
\begin_inset Index idx
status open

\begin_layout Plain Layout
red de sensores
\end_layout

\end_inset

 es el conjunto de sensores y actuadores que proporcionan información sobre
 variables de interés en el hogar y permiten controlarlo.
 Por simplicidad, denominaremos a este conjunto de dispositivos simplimente
 por el término 
\emph on
red de sensores
\emph default
.
\end_layout

\begin_layout Description
Nube se trata de un servicio on-line que permite el almacenamiento y gestión
 de los datos producidos por la red de sensores.
 En este caso, se usará el servicio AWS IoT para tal fin.
\end_layout

\begin_layout Description
App
\begin_inset space ~
\end_inset

móvil interfaz a través la cuál el usuario interacciona con su SmartHome.
 La App muestra los datos recogidos por los sensores y permite modificar
 el estado de los actuadores, manualmente o a través de reglas.
\end_layout

\begin_layout Section
La pasarela 
\emph on
miniGW
\emph default

\begin_inset Index idx
status open

\begin_layout Plain Layout
miniGW
\end_layout

\end_inset


\end_layout

\begin_layout Standard
El dispositivo con el que trabajaremos será el miniGW introducido en la
 sección anterior.
 Como explicamos anteriormente, el miniGW es la pasarela entre la red de
 sensores y la nube de Amazon, por lo que organiza y traduce los mensajes
 de esta red, para transmitirlos a través de la pila de protocolos de Internet.
\end_layout

\begin_layout Standard
Como puede comprobarse en la 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:miniGW-foto-hardware"

\end_inset

, el miniGW no es más que un pequeño circuito impreso, cuyas dimensiones
 no exceden los 10x10x4
\begin_inset space ~
\end_inset

cm #!.
 Se trata de un dispositivo basado en microcontrolador, en el que un XMC4500
 hace las veces de cerebro, encargándose de la lógica y de la coordinación
 de las distintas interfaces.
 Es en este circuito donde se encuentra el programa que gestiona las distintas
 tareas de las que el miniGW tiene que hacerse cargo, así como la pila de
 protocolos de Internet y los controladores de las distintas interfaces.
 Entre estas interfaces, cabe destacar el TDA5340, un transceptor de muy
 bajo consumo encargado de mantener la comunicación con los sensores.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/MiniGW_01.jpg
	lyxscale 10
	width 50col%

\end_inset


\begin_inset Graphics
	filename img/MiniGW_02.jpg
	lyxscale 10
	width 50col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:miniGW-foto-hardware"

\end_inset

Fotografía del hardware del miniGW.
 Pueden observarse distintos componentes electrónicos e interfaces.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Además de estos circuitos principales, que describiremos a continuación,
 el miniGW cuenta con las siguientes interfaces físicas.
 Estas interfaces, representadas en la 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:miniGW-Arquitectura-hardware"

\end_inset

, permiten que miniGW se comunique con el mundo exterior:
\end_layout

\begin_layout Description
Puerto
\begin_inset space ~
\end_inset

micro
\begin_inset space ~
\end_inset

USB proporciona alimentación al circuito.
 Además, puede usarse para varios propósitos, como establecer una comunicación
 serial o actualizar el firmware del XMC4500.
\end_layout

\begin_layout Description
Conector
\begin_inset space ~
\end_inset

RJ45 proporciona conexión a Internet a través de Ethernet.
\end_layout

\begin_layout Description
Ranura
\begin_inset space ~
\end_inset

micro
\begin_inset space ~
\end_inset

SD proporciona acceso a una memoria no volátil, sirviendo de almacenamiento
 para los datos de sensores, la interfaz web, etc.
 También puede usarse para cargar un nuevo firmware del XMC4500.
\end_layout

\begin_layout Description
Antena recoge las señales de radio enviadas por los sensores, a la vez que
 permite transmitir señales a los actuadores.
 Está conectada directamente al TDA5340.
\end_layout

\begin_layout Description
Acceso
\begin_inset space ~
\end_inset

a
\begin_inset space ~
\end_inset

pines se trata de un acceso a la interfaz de programación y depuración del
 microcontrolador JTAG.
 Este conector solo se encuentra en la versión de desarrollo del miniGW,
 no soldándose en producción.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/hardware-architecture.eps
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:miniGW-Arquitectura-hardware"

\end_inset

Arquitectura hardware del miniGW.
 Pueden distinguirse los módulos principales y las diferentes interfaces.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A continuación expondremos algunos detalles de interés sobre los dos módulos
 principales del sistema: el microcontrolador XMC4500 y el transceptor TDA5340.
 Posteriormente, introduciremos la estructura del firmware presente en el
 miniGW.
\end_layout

\begin_layout Subsubsection
XMC4500
\end_layout

\begin_layout Standard
XMC4500 es un microcontrolador de la familia de microcontroladores de alto
 rendimiento XMC4000 de Infineon.
 Esta familia, basada en el procesador ARM Cortex-M4, está optimizada para
 tareas tales como el control industrial, conversión de potencia y sensorización
 y control.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/XMC-block-diagram.eps
	width 90col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:XMC-block-diagram"

\end_inset

Diagrama de bloques del microcontrolador XMC4500 
\begin_inset CommandInset citation
LatexCommand cite
key "infineon:XMC4500"

\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
La 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:XMC-block-diagram"

\end_inset

 muestra el diagrama de bloques de este circuito, que cuenta con numerosos
 módulos de aceleración hardware.
 A continuación presentamos una lista con las características principales
 de este microcontrolador 
\begin_inset CommandInset citation
LatexCommand cite
key "infineon:XMC4500"

\end_inset

.
 Esta lista no es exhaustiva, nos centraremos exclusivamente en aquellas
 características que serán más relevantes en la consecución del presente
 proyecto.
\end_layout

\begin_layout Itemize
Núcleo de procesamiento
\end_layout

\begin_deeper
\begin_layout Itemize
Núcleo ARM Cortex-M4.
 CPU de 32 bits de alto rendimiento, con instrucciones para procesamiento
 digital de señales (DSP).
\end_layout

\begin_layout Itemize
Temporizador del sistema (SysTick) para dar soporte a sistemas operativos.
\end_layout

\begin_layout Itemize
Unidades de acceso directo a memoria (DMA) y de protección de memoria (MPU).
\end_layout

\end_deeper
\begin_layout Itemize
Bancos de memoria integrados
\end_layout

\begin_deeper
\begin_layout Itemize

\lang english
16 KB on-chip boot ROM
\end_layout

\begin_layout Itemize

\lang english
64 KB on-chip high-speed program memory 
\end_layout

\begin_layout Itemize

\lang english
64 KB on-chip high speed data memory 
\end_layout

\begin_layout Itemize

\lang english
32 KB on-chip high-speed communication 
\end_layout

\begin_layout Itemize

\lang english
1024 KB on-chip Flash Memory with 4 KB instruction cache
\end_layout

\end_deeper
\begin_layout Itemize
Periféficos de comunicación
\end_layout

\begin_deeper
\begin_layout Itemize
Módulo Ethernet MAC compatible con las tasas de transmisión 10/100 Mbit/s.
\end_layout

\begin_layout Itemize
Universal Serial Bus, USB 2.0 host.
\end_layout

\begin_layout Itemize
Canales de interfaz serial universal (USIC), configurables como interfaces
 UART, double-SPI, quad-SPI, IIC, IIS y LIN.
\end_layout

\begin_layout Itemize
Interfaces SD y Multi-Media Card (SDMMC) para tarjetas de almacenamiento
 de datos.
\end_layout

\begin_layout Itemize
Unidad de interfaz de bus externo (EBU), permitiendo la comunicación con
 memorias externas y otros periféricos 
\lang english
off-chip
\lang spanish
.
\end_layout

\end_deeper
\begin_layout Itemize
Periféricos analógicos
\end_layout

\begin_deeper
\begin_layout Itemize
Conversores analógico-digital (VADC) con 12 bits de resolución.
\end_layout

\begin_layout Itemize
Conversores digital-analógico (DAC) con 12 bits de resolución.
 Estos conversores tienen distintos modos de operación, con los que pueden
 generar distintas formas de onda, incluyendo ruido 
\begin_inset CommandInset citation
LatexCommand cite
key "infineon:XMC4500-reference"

\end_inset

.
\end_layout

\end_deeper
\begin_layout Itemize
Periféricos de control industrial
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Unidades de captura y comparación (CCU4 y CCU8), que pueden ser configuradas
 como temporizadores o generadores de señal modulada por ancho de pulsos
 (PWM), entre otras muchas configuraciones 
\begin_inset CommandInset citation
LatexCommand cite
key "infineon:CCU8,infineon:CCU8"

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Perro guardián (WDT).
\end_layout

\begin_layout Itemize
Reloj de tiempo real (RTC).
\end_layout

\end_deeper
\begin_layout Itemize
Soporte para depuración del firmware
\end_layout

\begin_deeper
\begin_layout Itemize
Interfaces ARM-JTAG y SWD.
\end_layout

\begin_layout Itemize
Soporte para 
\lang english
breakpoints
\lang spanish
.
\end_layout

\end_deeper
\begin_layout Subsubsection
TDA5340
\end_layout

\begin_layout Standard
El TDA5340 es un transceptor de bajo consumo diseñado y producido por Infineon
 para aplicaciones en la industria del automóvil.
 Este circuito integrado permite distintos tipos de modulación, como ASK,
 FSK y GFSK para las bandas de frecuencia 300-320, 415-495 y 863-960 MHz
 
\begin_inset CommandInset citation
LatexCommand cite
key "infineon:TDA5340"

\end_inset

.
 El tipo de modulación, la frecuencia y otros parámetros de transmisión
 son seleccionados a través de un pequeño firmware que se ejecuta en este
 circuito.
 Este firmware permite además llevar a cabo algunas operaciones básicas
 como la entrada en el modo de suspensión.
\end_layout

\begin_layout Standard
Este módulo será el encargado de comunicar el miniGW con la red de sensores,
 recibiendo los datos de los distintos sensores para proporcionárselos al
 XMC4500 a través de un bus SPI.
 De forma análoga, el TDA enviará comandos a los actuadores a petición del
 microcontrolador.
\end_layout

\begin_layout Standard
La comunicación con los sensores y actuadores de la red de sensores se lleva
 a cabo a través de un protocolo propietario, que usa AES en su modo Cipher-Bloc
k Chaining (AES-CBC) para garantizar la seguridad.
\end_layout

\begin_layout Subsubsection
Firmware del XMC4500
\end_layout

\begin_layout Standard
La lógica del XMC4500 debe garantizar que el miniGW realiza todas las funciones
 para las que fue diseñado.
 En este firmware se incluyen diversas tareas que deberán ejecutarse en
 paralelo, como la recepción de paquetes de datos de los sensores o la continua
 actualización de la fecha y hora a través del protocolo NTP.
 La estructura del firmware es muy compleja y escapa a los objetivos de
 esta memoria.
 Sin embargo, la finalidad de este proyecto es demostrar el uso de AWS IoT
 SDK
\begin_inset Note Note
status open

\begin_layout Plain Layout
revisar!!
\end_layout

\end_inset

, a través de una capa de seguridad TLS que deberá permanecer compatible
 con el resto de elementos del firmware.
 Por este motivo, necesitamos revisar cuáles son los elementos fundamentales
 que estarán incluidos en el sistema final, y que supondrán el marco en
 el cuál deberemos integrar la biblioteca TLS y el AWS IoT SDK.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Explicar mejor cómo funciona el firmware y qué tareas se van a tener (explicació
n exhaustiva de las funciones implementadas en el miniGW -> fuera del scope
 del documento, pero se contarán algunas tareas representativas y qué recursos
 requieren p.ej.
 NTP client ejecutándose cada cierto intervalo de tiempo y actualizando
 el RTC, reenvío de datos de los sensores cada vez que se recibe un paquete
 (TDA->SHEI->JSON->lwIP)).
\end_layout

\begin_layout Plain Layout
En la prueba 1: una tarea sencilla que sea cliente HTTPS.
 
\end_layout

\begin_layout Plain Layout
En la prueba 2: Cliente de AWS IoT, que enviará un mensaje a un canal MQTT
 cada cierto tiempo.
\end_layout

\begin_layout Plain Layout
En el sistema final (fuera de los objetivos de este trabajo): tarea para
 NTP, tarea para recepción de los datos de los sensores, tarea para actualizar
 la sombra, etc.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/firmware-architecture.eps
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Arquitectura-firmware"

\end_inset

Arquitectura del firmware del miniGW.
 Las líneas continuas indican dependencias entre módulos, las líneas discontinua
s indican comunicación entre tareas.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
La arquitectura del firmware puede consultarse en la 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:Arquitectura-firmware"

\end_inset

.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Contar un poco la arquitectura: tareas con funcionalidad específica que
 se sustentan en otras bibliotecas, principalmente las pilas de protocolos
 IP y SHEI (red de sensores) y en los elementos de bajo nivel, proporcionados
 en última instancia por la XMClib.
 Se explican con detalle dos de los módulos más grandes y que serán usados
 posteriormente.
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
CMSIS-RTOS
\begin_inset space ~
\end_inset

(vX.Y)
\begin_inset Note Note
status open

\begin_layout Plain Layout
versión del software!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Las distintas tareas que debe realizar
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
El firmware d
\end_layout

\end_inset

 el miniGW está construidas sobre un sistema operativo de tiempo real denominado
 CMSIS-RTOS.
 Este RTOS, diseñado especialmente para dispositivos Cortex-M #ref#, permite
 que las distintas tareas se ejecuten de forma concurrente y proporcionan
 herramientas para la gestión de recursos y de la comunicación entre tareas.
\end_layout

\begin_layout Paragraph
lwip
\begin_inset space ~
\end_inset

(vX.Y)
\begin_inset Note Note
status open

\begin_layout Plain Layout
versión del software!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La pila de protocolos de Internet está proporcionada por lwIP.
 Esta biblioteca está diseñada para reducir el uso de recursos, conservando
 todas las funcionalidades de TCP/IP #ref#.
 Proporciona una interfaz de sockets tipo BSD estándar.
\end_layout

\begin_layout Standard
Tanto CMSIS-RTOS como lwIP están disponibles en el formato de 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
DAVE
\end_layout

\end_inset

 APPs, por lo que han sido añadidas al proyecto usando esta herramienta,
 como muestra la 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:DAVE-main"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:DAVE-main"

\end_inset

Vista principal en 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
DAVE
\end_layout

\end_inset

.
 En la zona inferior pueden observarse las 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
DAVE
\end_layout

\end_inset

 APPs que se usan en el proyecto de partida.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Red de sensores
\end_layout

\begin_layout Standard
La red de sensores se encarga de monitorizar variables de interés para el
 usuario, transmitiéndolos al miniGW de forma inalámbrica.
 La gama de productos H2 de eesy-innovation incluye una multitud de sensores
 y actuadores, como sensores de presencia, estación meteorológica, enchufe
 inteligente (SmartPlug), etc.
 Todos estos nodos se comunican con el miniGW a través de un protocolo propietar
io, que usa AES en su modo Cipher-Block Chaining (AES-CBC) para garantizar
 la seguridad.
 Además, cada uno de estos sensores y actuadores tiene un UID que lo identifica
 de forma única, no solo en la red local, sino en toda la Internet.
\begin_inset Note Note
status open

\begin_layout Plain Layout
explicar mejor
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Una diferencia a destacar entre los sensores y los actuadores es que los
 primeros usan un transmisor (comunicación unidireccional) mientras que
 los segundos hacen uso de un transceptor (comunicación bidireccional).
 Esto fuerza que la topología de red sea en estrella, donde el nodo central
 es el miniGW.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Gracias al uso de transmisores dede muy bajo consumo, los sensores que les
 permite funcionar con batería durante meses
\end_layout

\end_inset


\end_layout

\begin_layout Section
La nube de Amazon 
\emph on
AWS
\begin_inset space ~
\end_inset

IoT
\end_layout

\begin_layout Standard
El servicio AWS IoT se encarga de almacenar los datos de los sensores, haciendo
 que permanezcan disponibles para que el usuario pueda consultarlos cuando
 desee.
 Esto se consigue gracias a la sombra del dispositivo descrita con mas detalle
 en el cap 2#ref#.
\end_layout

\begin_layout Standard
La nube contendrá dispositivos virtuales, uno por cada sensor/actuador físico,
 que tendrá que asociarse al usuario.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Brevemente, ya ha sido descrita en cap 2
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\color red
Identificar elementos físicos con nombres de Amazon
\end_layout

\begin_layout Standard
Tendremos que definir al menos un dispositivo de prueba para el GW, con
 su certificado y todas esas cosas.
\end_layout

\begin_layout Standard
Ahora que hemos estudiado la estructura de AWS
\begin_inset space ~
\end_inset

IoT, vamos a poner nuestros conocimientos en práctica conectando un dispositivo
 a la nube.
 Este dispositivo enviará mensajes periódicamente, que contendrán los valores
 de distancia medidos.
 Para llevar a cabo este proceso, tendremos que ocuparnos de dos tareas
 principales.
 
\end_layout

\begin_layout Standard
En primer lugar, nos ocuparemos de definir un nuevo dispositivo en la nube
 de Amazon.
 Para ello, será necesario crear una cuenta en AWS y acceder a la consola
 del servicio AWS
\begin_inset space ~
\end_inset

IoT
\begin_inset space ~
\end_inset

Core.
 
\end_layout

\begin_layout Standard
Una vez configurado nuestro dispositovo virtual, pasaremos a escribir el
 programa que se ejecutará en el módulo ESP8266.
 Este programa será el responsable de establecer la conexión con AWS
\begin_inset space ~
\end_inset

IoT.
\end_layout

\begin_layout Section
App móvil
\end_layout

\begin_layout Standard
La App se conecta a la nube de Amazon a través de las APIs pertinentes,
 permitiendo al usuario visualizar los datos.
 Esta App queda fuera del alcance de este documento.
\end_layout

\begin_layout Standard
Sin embargo, para comprobar que la conexión entre el miniGW y la nube de
 Amazon se establece correctamente, se ha usado la consola de AWS IoT, como
 se describirá en el capítulo ###.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Análisis-implementacions-TLS"

\end_inset

Análisis de diferentes bibliotecas TLS
\end_layout

\begin_layout Standard
Como vimos en el 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Seguridad-en-sist-empotrados"

\end_inset

, las dos características principales de un sistema empotrado son sus limitacion
es de recursos y la ausencia de un sistema operativo real.
 Estas dos características derivan directamente de la definición de sistema
 empotrado (sistema que realiza una tarea específica), y condicionan por
 completo el desarrollo de su software.
\end_layout

\begin_layout Standard
En el tema que nos ocupa, las limitaciones en los recursos computacionales
 nos llevarán a buscar implementaciones del protocolo TLS ligeras, cuya
 configuración se realice, preferiblemente, en tiempo de compilación.
 También tendremos que asegurarnos de que las implementaciones analizadas
 puedan funcionar con los servicios mínimos proporcionados por un RTOS.
\end_layout

\begin_layout Standard
Dedicaremos el presente capítulo al análisis de diversas implementaciones
 TLS, llevado a cabo tras un ejercicio de búsqueda cuyo objetivo ha sido
 conocer las implementaciones TLS más destacadas en el ámbito de los sistemas
 empotrados.
 Realizaremos este análisis mediante la evaluación de una lista de característic
as, que incluye, pero no se limita a: requisitos computacionales, funcionalidade
s, portabilidad y coste de la implementación.
 Elegiremos la biblioteca TLS atendiendo al análisis presentado a continuación,
 que también contará, de forma adicional, con algunos aspectos económicos
 y de licencia.
\color red

\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\color red
The aim of this section is to research and analyze the available TLS libraries.
 WolfSSL and mbedTLS will be first considered and analyzed.
 If other libraries with similar characteristics are found will be considered
 in the study also.
 A list of features will be evaluated, including (but not limiting to) computati
onal requirements, functional capabilities, portability, cost implementation,
 etc.
 Choice of the TLS library to be adapted based on the features previously
 evaluated.
 The decision will be justified using engineering criteria.
 The chosen TLS library will also satisfy the requirements regarding intended
 functionality as well as economical and legal conditions.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Alternativas a OpenSSL.
 Más ligeras, gracias a que pueden elegirse las ciphersuites en tiempo de
 compilación.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Hablar brevemente de mi experiencia con las bibliotecas y chips que he usado
 (características, requisitos en cuanto a recursos, opciones de configuración,
 etc).
\end_layout

\end_inset


\end_layout

\begin_layout Section
Criterios de búsqueda y evaluación
\end_layout

\begin_layout Standard
La búsqueda de bibliotecas TLS se ha llevado a cabo usando diversas herramientas
 de búsqueda, entre las que se inclyen el motor genérico de Google, artículos
 de Wikipedia 
\begin_inset CommandInset citation
LatexCommand cite
key "wiki:tls-implementations"

\end_inset

, los repositorios de Github y el foro de desarrolladores Stackexchange.
 Esta búsqueda, en cambio, ha prescindido de bases de datos académicas,
 ya que se solo hemos considerado implementaciones comerciales o que se
 encuentren en producción.
\end_layout

\begin_layout Standard
En nuestra búsqueda, solo hemos considerado aquellas implementaciones de
 TLS que se ajustaran a sistemas embebidos.
 Este criterio supone que las bibliotecas deben estar programadas en lenguaje
 C estándar, y que deben presentar el mínimo número de dependencias.
 Estas características son muy deseables a la hora de integrar una biblioteca
 en un sistema embebido.
 Idealmente, la biblioteca seleccionada presentará ciertas facilidades para
 la integración con el sistema objetivo, como la compilación nativa en CMSIS-RTO
S o compatibilidad con la pila de lwIP.
\end_layout

\begin_layout Standard
Además de la compatibilidad con el sistema, 
\end_layout

\begin_layout Itemize
activas (en continuo desarrollo): requisito de seguridad, por si se encuentran
 vulnerabilidades - presencia en redes sociales / foros y actividad de la
 comunidad.
\end_layout

\begin_layout Itemize
ciphersuite compatible con AWS
\begin_inset space ~
\end_inset

IoT (TLS
\begin_inset space ~
\end_inset

1.2) 
\begin_inset CommandInset citation
LatexCommand cite
key "AWS-IoT-Security-and-Identity"

\end_inset

.
 Se recomiendan:
\end_layout

\begin_deeper
\begin_layout Itemize
ECDHE-ECDSA-AES128-GCM-SHA256 (recommended)
\end_layout

\begin_layout Itemize
ECDHE-RSA-AES128-GCM-SHA256 (recommended)
\end_layout

\end_deeper
\begin_layout Standard
Los criterios de búsqueda establecidos nos hacen descartar la conocida bibliotec
a de seguridad OpenSSL.
 A pesar de que esta biblioteca cuenta con una larga tradición y sigue siendo
 un marco de referencia para muchas de las aplicaciones que implementan
 TLS, OpenSSL no fue diseñada para sistemas embebidos, por lo que su tamaño
 excede las limitaciones de nuestro sistema.
 Además, presenta dependencias que serían difícilmente salvables, y sus
 desarrolladores no recomiendan compilar OpenSSL en un entorno para el que
 no está preparado 
\begin_inset CommandInset citation
LatexCommand cite
key "OpenSSL-wiki-config"

\end_inset

.
\end_layout

\begin_layout Standard
Además de los requisitos mencionados anteriormente, se evaluarán positivamente
 las siguientes características:
\end_layout

\begin_layout Itemize
Documentation availability – indispensable to check the available features
 and their use, as well as comparing the library’s API and suitability 
\end_layout

\begin_layout Itemize
Support for engineers – very convenient in the case support is needed during
 the implementation 
\end_layout

\begin_layout Itemize
Source code availability – helps with the task of finding features, makes
 possible the evaluation of the implementation; in the case of open repository
 (like github), the development can be watched closely 
\end_layout

\begin_layout Itemize
Licencias compatibles con la actividad a realizar
\end_layout

\begin_layout Itemize
Precios razonables
\end_layout

\begin_layout Section
Bibliotecas analizadas
\end_layout

\begin_layout Standard
En esta sección presentaremos brevemente cada una de las bibliotecas analizadas,
 revisando algunos datos generales o de especial relevancia.
\end_layout

\begin_layout Subsubsection
mbedTLS
\end_layout

\begin_layout Standard
Esta implementación, lanzada en 2006 bajo la denominación de PolarSSL, da
 soporte a los protocolos y configuraciones de TLS más usados.
 Se centra en la claridad del código y modularidad y está ampliamente documentad
a.
 Se distribuye bajo la licencia de código abierto Apache 2.0, por lo que
 puede usarse de forma gratuita para propósitos comerciales, siempre que
 se respeten los términos de la licencia.
\end_layout

\begin_layout Standard
Además, mbedTLS es la biblioteca de seguridad del proyecto mbed de ARM.
 Este proyecto trata de poner en conjunto una serie de herramientas para
 el desarrollo ágil de sistemas empotrados, incluyendo IoT.
 Con mbedTLS, la compañía apuesta por un mundo de dispositivos interconectados
 de forma segura.
\end_layout

\begin_layout Subsubsection
WolfSSL
\end_layout

\begin_layout Standard
Lanzada en 2006 bajo la denominación de CyaSSL, da soporte a los protocolos
 y configuraciones de TLS más usados.
 Es altamente modular y personalizable, gracias a los diversos Makefiles
 que incluye consigo.
 Se distribuye siguiendo un modelo de doble licencia, incluyendo una licencia
 Open Source y otra comercial, que tiene un precio de license USD $5000.
\end_layout

\begin_layout Standard
Esta implementación es conocida por su uso en MySQL #REF!!!####, por lo
 que ha adquirido una presencia considerable.
 Por último, una de las versiones de la biblioteca criptográfica wolfCrypt
 tiene una 
\color red
certificación FIPS
\begin_inset space ~
\end_inset

140-2
\color inherit
 #REF# (Certificate #2425).
\end_layout

\begin_layout Subsubsection
MatrixSSL
\end_layout

\begin_layout Standard
Lanzada en 2004, da soporte a los protocolos y configuraciones de TLS más
 usados.
 De acuerdo con la web oficial, su footprint puede ser reducido hasta ~50KB,
 incluyendo biblioteca de criptografía y certificados, o hasta ~10KB en
 su Tiny version, que solo soporta PSK #REF#.
 Se distribuye bajo la licencia de software libre GPLv2, aunque también
 existe una licencia comercial (precio no disponible en la web oficial).
\end_layout

\begin_layout Subsubsection
cryptlib
\end_layout

\begin_layout Standard
Lanzada inicialmente en 1995, da soporte a los protocolos y configuraciones
 de TLS más usados.
 Tiene un modelo de doble licencia, incluyendo una licencia Open Source
 y otra comercial, que puede adquirirse por USD $5000.
 #REF#
\end_layout

\begin_layout Subsubsection
SharkSSL
\end_layout

\begin_layout Standard
Esta implementación es una propuesta de Real Time Logic, una firma estadounidens
e dedicada a IoT.
 La compañía también distribuye soluciones para HTTPS, MQTT y SMQ, entre
 otras.
 De acuerdo con la web, SharkSSL puede compilarse en menos de 38KB ROM,
 necesitando solo 13KB RAM en tiempo de ejecución #ref#.
 Se distribuye bajo una licencia privada, cuyo precio no está disponible
 en la web.
 #ref#
\end_layout

\begin_layout Section
Análisis comparativo
\end_layout

\begin_layout Standard
La 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Comparación-general"

\end_inset

 muestra algunos datos generales de las bibliotecas mencionadas anteriormente,
 en los que se incluye la licencia y la compatibilidad con los distintos
 estándares TLS.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
arrayrulewidth=1.3pt
\end_layout

\end_inset


\size small

\begin_inset Tabular
<lyxtabular version="3" rows="14" columns="6">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="2cm">
<column alignment="left" valignment="top" width="2cm">
<column alignment="left" valignment="top" width="2cm">
<column alignment="left" valignment="top" width="2cm">
<column alignment="left" valignment="top" width="2cm">
<column alignment="left" valignment="top" width="2cm">
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
arrayrulecolor{white}
\backslash
rowcolor{head}
\backslash
color{white}
\end_layout

\end_inset


\size small
Implemen-tación
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
color{white}
\end_layout

\end_inset

WolfSSL
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
color{white}
\end_layout

\end_inset

mbedTLS
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
color{white}
\end_layout

\end_inset

MatrixSSL
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
color{white}
\end_layout

\end_inset

cryptlyb
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
color{white}
\end_layout

\end_inset

SharkSSL
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset

Desarrollador
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

WolfSSL Inc.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Arm Limited
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

PeerSec Networks
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Peter Gutmann
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Real Time Logic
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset

License
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset


\size small
GPLv2 / comercial
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset


\size small
Apache Licences 2.0 || GPLv2 / comercial
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset


\size small
GPLv2 / comercial
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{bad}
\end_layout

\end_inset


\size small
Licencia Sleepycat / comercial
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{bad}
\end_layout

\end_inset


\size small
Privativa (distribución comercial)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset

Precio para uso comercial
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

USD $5000
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sin costo (con condiciones)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{bad}
\end_layout

\end_inset


\size small
Información no disponible en la web
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

USD $5000
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{bad}
\end_layout

\end_inset


\size small
Información no disponible en la web
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset

SSL 2.0 (no
\begin_inset space ~
\end_inset

seguro)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

No
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

No
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

No
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

No
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{bad}
\end_layout

\end_inset

No especificado
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset

SSL 3.0 (no
\begin_inset space ~
\end_inset

seguro)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Desactivado por defecto
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Desactivado por defecto
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Desactivado por defecto
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Desactivado por defecto
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{bad}
\end_layout

\end_inset

No especificado
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset

TLS 1.0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset

TLS 1.1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset

TLS 1.2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset

DTLS 1.0
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{bad}
\end_layout

\end_inset

No
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{bad}
\end_layout

\end_inset

No
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset

DTLS 1.2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{bad}
\end_layout

\end_inset

No
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{bad}
\end_layout

\end_inset

No
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset

NSA suite B
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset


\color red
Certificaciones FIPS 140 de nivel 1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

wolfCrypt FIPS Module: 3.6.0 (#2425)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

No
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

SafeZone FIPS Cryptographic Mudule: 11 (#2389)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

No
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

No
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset

Conocido por
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Usado en MySQL
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Parte del proyecto mbed de ARM
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

No aplica
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

No aplica
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

No aplica
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Comparación-general"

\end_inset

Comparación de las bibliotecas analizadas: datos generales, licencia y compatibi
lidad con los distintos estándares TLS
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Debemos destacar aquí que a pesar de las diferencias mostradas, todas las
 bibliotecas consideradas cumplen con las siguientes características.
\end_layout

\begin_layout Itemize
Lenguaje de programación: C stándard (y ensamblador, en algunos casos) 
\end_layout

\begin_layout Itemize
Soporte para TLS 1.2 
\end_layout

\begin_layout Itemize
Soporte para la suite
\begin_inset space ~
\end_inset

B definida por la agencia nacional de seguridad de los EEUU (NSA), que incluye
 #ref#
\end_layout

\begin_deeper
\begin_layout Itemize
Algoritmos de criptografía simétrica: Advanced Encryption Standard – AES-128
 y AES-256, con los modos CTR o GCM
\end_layout

\begin_layout Itemize
Algoritmos de criptografía asimétrica: Elliptic Curve Digital Signature
 Algorithm – ECDSA (firmas digitales) y Elliptic Curve Diffie-Hellman –
 ECDH (intercambio de claves) 
\end_layout

\begin_layout Itemize
Algoritmos de hash: Secure Hash Algorithm 2 – SHA-256 y SHA-384 (message
 digest) 
\end_layout

\end_deeper
\begin_layout Itemize
Footprint reducida, necesaria para la integración en sistemas embebidos
\end_layout

\begin_layout Itemize
Compatible con la arquitectura ARM
\end_layout

\begin_layout Paragraph
Compatibilidad con el sistema objetivo
\end_layout

\begin_layout Standard
Como desarrollamos en el 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Descripción-del-sistema"

\end_inset

, el sistema objetivo está basado en un procesador de la familia ARM Cortex
 M4, en el que se ejecuta CMSIS-RTOS como sistema operativo de tiempo real
 y se usa light-weight IP (lwIP) para implementar la pila de protocolos
 TCP/IP y UDP/IP.
\end_layout

\begin_layout Standard
Estos aspectos deben considerarse cuidadosamente a la hora de elegir la
 biblioteca TLS a implementar.
 En esta sección trataremos los aspectos de compatibilidad con el sistema
 objetivo, así como la disponibilidad de documentación y de otros recursos.
\end_layout

\begin_layout Standard
Además de los criterios mencionados al comienzo de este capítulo, evaluaremos
 el soporte para CMSIS-RTOS y para lwIP que ofrecen estas bibliotecas, ya
 que pueden reducir dramáticamente el tiempo de desarrollo.
\end_layout

\begin_layout Standard
La 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:Comparación-doc+compatib"

\end_inset

 muestra un resumen de la información obtenida a partir de fuentes oficiales
 de cada una de las implementaciones al respecto.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
arrayrulewidth=1.3pt
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="6">
<features islongtable="true" headBottomDL="true" longtabularalignment="center">
<column alignment="left" valignment="top" width="2cm">
<column alignment="left" valignment="top" width="2cm">
<column alignment="left" valignment="top" width="2cm">
<column alignment="left" valignment="top" width="2cm">
<column alignment="left" valignment="top" width="2cm">
<column alignment="left" valignment="top" width="2cm">
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
arrayrulecolor{white}
\backslash
rowcolor{head}
\backslash
color{white}
\end_layout

\end_inset


\size small
Implemen-tación
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
color{white}
\end_layout

\end_inset

WolfSSL
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
color{white}
\end_layout

\end_inset

mbedTLS
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
color{white}
\end_layout

\end_inset

MatrixSSL
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
color{white}
\end_layout

\end_inset

cryptlyb
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
color{white}
\end_layout

\end_inset

SharkSSL
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset

Disponibilidad de documentación
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Disponible de forma abierta en la web oficial.
 Exhaustiva y bien organizada.
 Numerosos recursos en línea
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Disponible de forma abierta en la web oficial.
 Exhaustiva y bien organizada.
 Numerosos recursos en línea
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Disponible de forma abierta en forma de PDF, descargable desde el repositorio
 oficial.
 Recursos en línea limitados
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Disponible de forma abierta en forma de manual PDF.
 Recursos en línea limitados
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{bad}
\end_layout

\end_inset

No disponible de forma abierta (es necesario registrarse para probar ejemplos).
 Sin recursos en línea
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset

Comunidad 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset


\size default
Muy activa
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset


\size default
Muy activa
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{bad}
\end_layout

\end_inset


\size default
Poco activa
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{bad}
\end_layout

\end_inset


\size default
Poco activa
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{bad}
\end_layout

\end_inset


\size default
Inexistente
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset

Soporte para ingenieros
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Foro para Q&A.
 Soporte por e-mail.
 GitHub Issues
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Foro para Q&A.
 Soporte por e-mail.
 GitHub Issues
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Soporte por e-mail.
 GitHub Issues
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Soporte por e-mail.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Soporte por e-mail.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset

Disponibilidad del código fuente
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Disponible en GitHub (
\color red
73+
\color inherit
 versiones estables).
 Disponible el código de la última versión estable en la web oficial
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Disponible en GitHub (
\color red
99+
\color inherit
 versiones estables).
 Disponibles varias versiones estables en la web oficial
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Disponible en GitHub (
\color red
2+
\color inherit
 versiones estables).
 Disponibles 46+ versiones estables en la web oficial
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Bajo demanda, tras rellenar un formulario
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{bad}
\end_layout

\end_inset

No disponible antes de la adquisición de la licencia
\end_layout

\end_inset
</cell>
</row>
<row newpage="true">
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset

Presencia en las redes sociales
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Web clara, GitHub, Twitter, Facebook, Linkedin
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Web clara, GitHub, Twitter, Facebook, Linkedin
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Web plana, GitHub, blog
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{bad}
\end_layout

\end_inset

Web poco clara, blog
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{meh}
\end_layout

\end_inset

Web clara
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset

Soporte para CMSIS-RTOS
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí, característica incluida
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí, característica incluida
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{bad}
\end_layout

\end_inset

No se mencina en la web
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí, característica incluida.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{bad}
\end_layout

\end_inset

Con soporte para MDK-ARM y mbed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset

Soporte para lwIP
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí, característica incluida
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí, característica incluida
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{bad}
\end_layout

\end_inset

No se mencina en la web
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{bad}
\end_layout

\end_inset

No se mencina en la web ni en la documentación
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Comparación-doc+compatib"

\end_inset

Comparación de las bibliotecas analizadas: disponibilidad de documentación
 y soporte y compatibilidad con el sistema objetivo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Elección de la biblioteca
\end_layout

\begin_layout Standard
Having a look at the tables above, it is evident that WolfSSL and mbed TLS
 are the most suitable options.
 For this reason, they have been further analyzed.
 A closer comparison is presented below.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
arrayrulewidth=1.3pt
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="4cm">
<column alignment="left" valignment="top" width="4cm">
<column alignment="left" valignment="top" width="4cm">
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
arrayrulecolor{white}
\backslash
rowcolor{head}
\backslash
color{white}
\end_layout

\end_inset


\size small
Implementación
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
color{white}
\end_layout

\end_inset

WolfSSL
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
color{white}
\end_layout

\end_inset

mbedTLS
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset

Compilación en MS Windows
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí, con el proyecto de Visual Studio incluido
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí, con el proyecto de Visual Studio incluido y con la IDE Eclipse
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset

Compilación en GNU/Linux
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí, usando Make
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí, usando Make y CMake
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset

Configuración de la biblioteca
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí, en la forma de un fichero de configuración que modifica el comportamiento
 de Make
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí, modificando el fichero config.h
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset

Soporte para otros sistemas operativos de tiempo real (RTOS)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí, incluyendo Linux embebido, FreeRTOS, TinyOS y 
\begin_inset Formula $\mu$
\end_inset

C/OS.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí, incluyendo FreeRTOS, SEGGER, embedOS y eCOS.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset

Tests funcionales y comprobaciones de integridad
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí, conjunto de tests incluido
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí, conjunto de tests incluido
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset

Compatible con OpenSSL
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{head}
\backslash
color{white}
\end_layout

\end_inset

Disponibilidad de una versión con funcionalidades mínimas
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cellcolor{good}
\end_layout

\end_inset

Sí
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Comparación de WolfSSL y mbedTLS: características de compilación y configuración
 de la biblioteca
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A series of different TLS implementations have been analyzed and compared.
 Both open source and privative implementations have been considered.
 Among all the compared alternatives, WolfSSL and mbed TLS appear to be
 the most developed ones.
 They also have the strongest communities, widest presence in social networks,
 largest documentation and biggest development rate.
 For these reasons, WolfSSL and mbed TLS are concluded to better fit target
 system’s requirements.
 Checking the available information on WolfSSL and mbed TLS websites does
 not bring to a clear close.
 Actually, both libraries seem to have much the same features.
 Maybe diving into the code and performing some compilation tests would
 be convenient to end up with a definitive conclusion.
 
\end_layout

\begin_layout Standard
Tras valorar estas opciones, decidimos mbedTLS por los siguientes motivos:
 
\end_layout

\begin_layout Itemize
AWS IoT Device SDK funciona con mbedTLS de forma nativa
\end_layout

\begin_layout Itemize
#
\end_layout

\begin_layout Itemize
#
\end_layout

\begin_layout Itemize
#
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Implementación-TLS"

\end_inset

Integración de mbedTLS
\end_layout

\begin_layout Standard
Tras elegir la implementación TLS que integremos en el sistema, hemos llevado
 a cabo una evaluación en profundidad de la misma.
 Esta se ha basado principalmente en la documentación oficial de mbedTLS,
 disponible en su página web 
\begin_inset CommandInset citation
LatexCommand cite
key "mbedTLS-knowledge-base"

\end_inset

.
 También hemos estudiado su código fuente y su documentación para aclarar
 algunos detalles 
\begin_inset CommandInset citation
LatexCommand cite
key "mbedTLS-API-reference"

\end_inset

.
\end_layout

\begin_layout Standard
Dedicaremos este capítulo a la integración de mbedTLS en el XMC4500 presente
 en el miniGW.
 Presentaremos aquí algunos detalles de la biblioteca, que serán de interés
 para integrarla al sistema.
 A continuación, discutiremos los detalles de esta integración, recorriendo
 cada uno de los elementos portados.
\end_layout

\begin_layout Section
Detalles de la biblioteca
\end_layout

\begin_layout Standard
mbedTLS ofrece APIs tanto para la parte del cliente como para la del servidor,
 con soporte para todos los estándares SSL y TLS actuales.
 Además, la biblioteca incluye una amplio rango de algoritmos criptográficos.
 Asímismo, incluye una variedad de métodos de intercambio de claves, algoritmos
 de cifrado simétrico, algoritmos de hash, diversas curvas elípticas y herramien
tas para la generación de números aleatorios 
\begin_inset CommandInset citation
LatexCommand cite
key "mbedTLS-core-features"

\end_inset

.
 Además, mbedTLS dispone de todos los algoritmos criptográficos definidos
 en la 
\emph on
Suite
\begin_inset space ~
\end_inset

B
\emph default
 de la Agencia Nacional de Seguridad estadounidense (NSA) 
\begin_inset CommandInset citation
LatexCommand cite
key "rfc6379-NSA-Suite-B"

\end_inset

.
\end_layout

\begin_layout Subsection
Estructura de ficheros
\end_layout

\begin_layout Standard
El código fuente de la biblioteca está estructurado de la forma que se presenta
 a continuación.
\end_layout

\begin_layout Description

\family typewriter
/
\family default
 en el directorio raíz se encuentran los ficheros que podemos encontrar
 en la mayoría de los proyectos, como 
\family typewriter
Makefile
\family default
, 
\family typewriter
README
\family default
, 
\family typewriter
LICENSE
\family default
, etc.
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
configs
\family default
 en este directorio podemos encontrar diversos ejmplos de ficheros de configurac
ión.
\end_layout

\begin_layout Description

\family typewriter
doxygen
\family default
 ficheros de entrada para la documentación generada con Doxygen.
\end_layout

\begin_layout Description

\family typewriter
include
\family default
 ficheros de cabecera (
\family typewriter
.h
\family default
).
\end_layout

\begin_layout Description

\family typewriter
programs
\family default
 programas de ejemplo, que demuestran las distintas características de mbedTLS.
\end_layout

\begin_layout Description

\family typewriter
scripts
\family default
 scripts útiles para configurar mbedTLS y medir su rendimiento.
\end_layout

\begin_layout Description

\family typewriter
tests
\family default
 programas y scripts de test.
\end_layout

\begin_layout Description

\family typewriter
visualc
\family default
 proyecto de Microsoft
\begin_inset space ~
\end_inset

Visual
\begin_inset space ~
\end_inset

Studio, usado para compilar mbedTLS en entornos Windows.
\end_layout

\begin_layout Description

\family typewriter
yotta
\family default
 ficheros usados por Yotta para compilar mbedTLS como un módulo ARM
\begin_inset space ~
\end_inset

mbed.
\end_layout

\end_deeper
\begin_layout Subsection
Opciones de configuración
\end_layout

\begin_layout Standard
Dado que muy pocos sistemas requieren de todos los algoritmos criptográficos
 disponibles, mbedTLS permite habilitarlos o deshabilitarlos en tiempo de
 compilación.
 De este modo, tanto el tamaño del ejecutable como la memoria requerida
 en tiempo de ejecución son minimizados, atendiendo a las necesidades de
 la aplicación.
 Para facilitar el proceso de configuración a los desarrolladores, la biblioteca
 incluye un fichero de configuración con todas las opciones disponibles.
 Este fichero de configuración es, en realidad, un archivo de cabecera en
 lenguaje
\begin_inset space ~
\end_inset

C, que contiene una lista exhaustiva de definiciones con su correspondiente
 documentación.
 De esta forma, el dearrollador puede activar o desactivar cualquiera de
 las opciones.
 El fichero de configuración es referenciado por cada uno de los otros ficheros
 de cabecera, consiguiendo que la configuración se haga efectiva en tiempo
 de compilación.
 
\begin_inset CommandInset citation
LatexCommand cite
key "mbedTLS-config_h"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Las opciones son comprobadas para ver si son compatibles (por ejemplo, no
 se puede hacer un intercambio de claves basado en clave pública si no hay
 habilitadas claves públicas)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Las opciones de configuración pueden ser divididas en cutro grupos:
\end_layout

\begin_layout Description
Soporte
\begin_inset space ~
\end_inset

del
\begin_inset space ~
\end_inset

sistema estas opciones deben seleccionarse de forma acorde a la plataforma
 sobre la que se ejecutará mbedTLS.
\end_layout

\begin_layout Description
Soporte
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

características
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

seguridad estas opciones permiten elegir las características que son necesarias
 de cada módulo hablitado.
 De esta forma, pueden seleccionarse qué modos de cifrado estarán disponibles,
 qué curvas elípticas, qué algoritmos de intercambio de claves, etc.
 Se trata de opciones con una alta granularidad.
\end_layout

\begin_layout Description
Módulos
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

mbedTLS estas opciones permiten habilitar o deshabilitar los módulos de
 mbedTLS de forma completa.
 Por ejemplo, podríamos deshabilitar completamente RSA o MD5 si no son necesario
s
\end_layout

\begin_layout Description
Opciones
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

configuración
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

los
\begin_inset space ~
\end_inset

módulos estas opciones permiten ajustas opciones específicas para cada módulo,
 como el tamaño máximo de los números enteros, el tamñao de los búferes
 interonos de SSL, etc.
\end_layout

\begin_layout Standard
Todas estas opciones pueden modificarse de forma manual o usando un script
 en Perl proporcionado con la biblioteca.
 
\begin_inset CommandInset citation
LatexCommand cite
key "mbedTLS-how-do-i-configure,mbedTLS-reduce-footprint"

\end_inset


\end_layout

\begin_layout Subsection
Opciones de compilación
\end_layout

\begin_layout Standard
Con el fin ejecutar mbedTLS en la plataforma objetivo, tendremos que compilarlo
 con las opciones apropiadas, usando el conjunto de herramientas de compilación
 y enlazado necesarias.
 Tenemos cuatro formas de compilar la biblioteca.
 
\begin_inset CommandInset citation
LatexCommand cite
key "mbedTLS-how-do-I-build-compile"

\end_inset


\end_layout

\begin_layout Description
Makefile a pesar de ser el método de compilación por defecto en sistemas
 Unix-like, no es recomendada, ya que dejó de ser mantenida por el equipo
 de desarrollo de mbedTLS.
\end_layout

\begin_layout Description
CMake este método permite generar un fichero Makefile bien estructurado
 y de forma autmática, detectando las dependencias y las opciones de compilación.
 Además, crea una estructura de directorios con la que se consigue que los
 ficheros objeto no se mezclen con el código fuente.
 Este es el método recomendado por el equipo de mbedTLS.
\end_layout

\begin_layout Description
Yotta esta herramienta, creada en el marco del proyecto mbed de ARM, pretende
 ayudar a los desarrolladores que incluyen distintos módulos de mbed en
 sus proyectos.
 Está basada en CMake, pero cuenta con el concepto de módulos, de forma
 que resulta sencillo compilar distintos módulos que vayan a usarse en mbedOS.
\end_layout

\begin_layout Description
MS
\begin_inset space ~
\end_inset

Visual
\begin_inset space ~
\end_inset

Studio el equipo de mbedTLS proporciona un fichero de proyecto de Microsoft
 Visual Studio con el objetivo de que los desarrolladores que usen esta
 IDE puedan compilar la biblioteca sin preocuparse demasiado por el proceo
 de compilación.
\end_layout

\begin_layout Standard
Aunque estos son los procedimientos de compilación provistos con la biblioteca,
 existen más opciones.
 Por ejemplo, podemos incluir el código fuente en un proyecto de DAVE y
 dejar que este lo compile de forma automática.
 Esto es posible gracias a que DAVE genera los ficheros objeto para cada
 fichero 
\family typewriter
.c
\family default
, buscando las cabeceras en los directorios que se le indique.
 De esta forma, DAVE comprobará si hemos realizado algún cambio en los ficheros
 de mbedTLS antes de cada compilación, por lo que no tendremos que compilar
 la biblioteca y el proyecto por separado.
 Esta opción, aunque muy flexible, puede ser más lenta.
 Por eso, hemos preferido compilar la biblioteca en un fichero archivador
 (
\family typewriter
.a
\family default
), que será el que incluímos en el proyecto junto con los ficheros de cabecera
 (
\family typewriter
.h
\family default
).
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Portabilidad-mbedTLS"

\end_inset

Portabilidad a otras plataformas
\end_layout

\begin_layout Standard
mbedTLS está programado en código C estándar, por lo que es fácilmente portable.
 Además, el código de esta biblioteca es muy modular, siendo los siguientes
 los únicos módulos que presentan dependencias de la plataforma.
 
\begin_inset CommandInset citation
LatexCommand cite
key "mbedTLS-how-do-I-port"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
en el directorio library, cada fichero .c contiene una serie de defines con
 los que se selecciona la plataforma (#if #else).
 Para añadir la nueva plataforma, deberán modificarse estos ficheros y añadir
 las líneas pertinentes.
\end_layout

\end_inset


\end_layout

\begin_layout Description
Módulo
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

red
\begin_inset space ~
\end_inset

(
\lang english
Networking
\lang spanish
)
\begin_inset space ~
\end_inset

[requerido] las funciones de red están implementadas usando la API de sockets
 BSD.
 Gracias es esto, el módulo de red incluido con la biblioteca es compatible
 tanto con sistemas Unix con Windows.
 A fin de que mbedTLS pueda establecer comunicaciones de red en un sistema
 empotrado, será necesario compilarlo junto a una biblioteca que proporcione
 una interfaz de sockets BSD.
 
\end_layout

\begin_layout Description
Módulo
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

temporización
\begin_inset space ~
\end_inset

(
\lang english
Timing
\lang spanish
) este módulo es requerido únicamente cuando nuestro sistema establezca
 comunicaciones a través del protocolo DTLS.
 De lo contrario, podemos deshabilitarlo de forma segura.
\end_layout

\begin_layout Description
Fuentes
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

entropía
\begin_inset space ~
\end_inset

por
\begin_inset space ~
\end_inset

defecto
\begin_inset space ~
\end_inset

(
\lang english
Default
\begin_inset space ~
\end_inset

entropy
\begin_inset space ~
\end_inset

sources
\lang spanish
)
\begin_inset space ~
\end_inset

[requerido] el pool de entropía (entropy pool) se encarga de acumular y
 combinar la entropopía de distintas fuentes de una forma segura.
 Estas fuentes pueden estar basadas en software o en hardware, y deben proporcio
nársele al módulo de generación de números aleatorios.
 Aunque las funciones de entropía pueden ser desactivadas sin afectar a
 ningún otro módulo, la generación de números aleatorios es esencial para
 muchas des las funciones criptográficas, por lo que tendremos que asegurarnos
 una buena fuente de entropía para hacer que nuestro sistema sea seguro.
\end_layout

\begin_layout Description
Aceleración
\begin_inset space ~
\end_inset

Hardware
\begin_inset space ~
\end_inset

(
\lang english
Hardware
\begin_inset space ~
\end_inset

Acceleration
\lang spanish
) muchos de los módulos que implementan primitivas criptográficas pueden
 ser sustituidos por implementaciones alternativas de las mismas.
 De esta forma, la es posible aprovechar implementaciones hardware que puedieran
 estar presentes en la plataforma.
\end_layout

\begin_layout Description
Acceso
\begin_inset space ~
\end_inset

al
\begin_inset space ~
\end_inset

sitema
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

ficheros
\begin_inset space ~
\end_inset

(
\lang english
Filesystem
\begin_inset space ~
\end_inset

access
\lang spanish
) todas las funciones que acceden al sistema de ficheros están implementadas
 de forma que, en realidad, simplemente se lee un búfer de memoria.
 De este modo, solo es necesario portar las funciones que cargan/guardan
 el contenido de estos búferes del/al sistema de ficheros.
 Gracias a esta implementación, los desarrolladores pueden elegir si prefieren
 leer los datos del disco o incrustarlos 
\begin_inset Quotes fld
\end_inset

a fuego
\begin_inset Quotes frd
\end_inset

 en el código fuente (hard-coded).
\end_layout

\begin_layout Description
Reloj
\begin_inset space ~
\end_inset

en
\begin_inset space ~
\end_inset

tiempo
\begin_inset space ~
\end_inset

real
\begin_inset space ~
\end_inset

(
\lang english
Real-Time
\begin_inset space ~
\end_inset

Clock
\lang spanish
) algunos módulos acceden de forma opcional a la hora y fecha actuales,
 bien para medir intervalos de tiempo, bien para conocer la fecha y hora
 actuales.
 Este módulo solo es imprescindible a la hora de validar la vigencia o caducidad
 de los certificados X.509.
\end_layout

\begin_layout Subsection
Programas de ejemplo
\end_layout

\begin_layout Standard
mbedTLS incluye numerosos programas de ejemplo, con los que pueden probarse
 las distintas características de la biblioteca.
 Por su relevancia en este proyecto, haremos referencia a dos de ellos.
 Estos programas han sido cuidadosamente estudiados, usando parte de su
 código en algunos pasos de la integración.
\end_layout

\begin_layout Subsubsection
Certificate Authorities 
\end_layout

\begin_layout Standard

\family typewriter
programs/x509/cert_app.c
\family default
 demuestra el uso de certificados X.509 en mbedTLS.
 
\end_layout

\begin_layout Standard
Las autoridades certificadoras pueden cargarse a partir del sistema de ficheros
 haciendo uso de las funciones 
\family typewriter
mbedtls_x509_crt_parse_file()
\family default
 y 
\family typewriter
mbedtls_x509_crt_parse_path()
\family default
.
 Estas funciones no son más que una envoltura (wrapper) de la función 
\family typewriter
mbedtls_x509_crt_parse()
\family default
, la cuál analiza el contenido de un búfer para obtener los distintos campos
 que conforman el certificado, guardándolos en una estructura definida en
 la biblioteca.
\end_layout

\begin_layout Subsubsection
Connection sockets 
\end_layout

\begin_layout Standard

\family typewriter
programs/ssl/ssl_client1.c
\family default
 demuestra el uso de sockets a la hora de realizar una conexión TLS desde
 el lado del cliente.
 Los siguientes pasos deben seguirse para establecer la conexión.
\end_layout

\begin_layout Enumerate
Inicializar el contexto TCP mediante la función 
\family typewriter
mbedtls_net_connect()
\family default
.
 En este paso deben especificarse la dirección del servidor (IP o DNS),
 el puerto y el protocolo.
\end_layout

\begin_layout Enumerate
Configurar el contexto TLS con 
\family typewriter
mbedtls_ssl_config_defaults()
\family default
.
 En este paso deben definirse algunos parámetros de configuración de TLS,
 
\color red
como la versión o las ciphersuites
\color inherit
.
\end_layout

\begin_layout Enumerate
Iniciar la conexión segura con 
\family typewriter
mbedtls_ssl_set_bio()
\family default
 y 
\family typewriter
mbedtls_ssl_handshake()
\family default
.
 Si todo va bien, después de este paso el handshake habrá concluido con
 éxito, por lo que podremos pasar a transmitir datos de forma segura.
\end_layout

\begin_layout Enumerate
Recibir y enviar datos de forma segura con 
\family typewriter
mbedtls_ssl_read()
\family default
 y 
\family typewriter
mbedtls_ssl_write()
\family default
.
\end_layout

\begin_layout Enumerate
Para finalizar, debe cerrarse la conexión con 
\family typewriter
mbedtls_ssl_close_notify()
\family default
.
 No debemos olvidarnos de liberar la memoria dinámica que hayamos reservado
 en los pasos anteriores.
\end_layout

\begin_layout Subsection
Comprobaciones de integridad
\end_layout

\begin_layout Standard
La biblioteca incluye numerosos tests, que comprueban que los distintos
 módulos funcionan de manera adecuada.
 Estos tests son, en realidad, programas que se compilan haciendo uso de
 los diferentes módulos de la biblioteca.
 Al ejecutarse, cada test comprueba que los módulos examinados funcionan
 de forma correcta o, en su defecto, qué código de error devuelven, para
 informar al usuario.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Añadir ejemplos de los tests! Se ha usado uno de estos test en el microcontrolad
or para comprobar que todo funcionaba, no?
\end_layout

\end_inset


\end_layout

\begin_layout Section
Integración de mbedTLS en el miniGW
\end_layout

\begin_layout Standard
Portar a XMC con CMSIS-RTOS, vamos
\end_layout

\begin_layout Standard
Hablar del montaje en el laboratorio (PC como bridge, switch, intranet,
 Internet)
\end_layout

\begin_layout Standard
Partiremos de un proyecto inicial en el que están presentes CMSIS-RTOS y
 lwIP.
 Este proyecto de partida no realiza ninguna función en especial, pero tiene
 una pila IP funcional, y se le puede hacer ping.
\end_layout

\begin_layout Subsection
Importación de mbedTLS al proyecto
\end_layout

\begin_layout Standard
Para integrar cualquier biblioteca, lo primero que tendremos que hacer es
 importarla al proyecto.
 De esta forma, el IDE la compilará automáticamente con el resto del código,
 pudiéndose referenciar los objetos de la misma desde cualquier lugar.
 Existen dos formas principales de importar la biblioteca al proyecto.
 La primera de ellas consiste en copiar los ficheros de la biblioteca al
 directorio del proyecto.
 De esta forma, todo el código fuente, tanto el del programa usuario como
 el de la biblioteca, se encontrará bajo el mismo directorio, siendo accesible
 al proceso de compilación.
 Sin embargo, esta aproximación presenta algunos inconvenientes, sobre todo
 cuando se trata de usar una misma biblioteca que está sujeta a cambios
 en distintos proyectos.
 En este caso, DAVE nos ofrece una alternativa, que hereda de Eclipse IDE.
 La alternativa consiste en 
\begin_inset Quotes fld
\end_inset

enlazar
\begin_inset Quotes frd
\end_inset

 la biblioteca al proyecto, de forma que en el mismo lo único que existe
 es una referencia a la primera.
 De esta forma, cualquier cambio que realicemos a la biblioteca dentro del
 proyecto quedará guardado en la misma.
 Este flujo de trabajo es especialmente conveniente cuando la biblioteca
 se tiene bajo control de versiones, en un repositorio compartido por todo
 el equipo
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Git submodules es otra forma de resolver este problema.
 Sin embargo, el flujo de trabajo de eesy-innovation no contempla el uso
 de submódulos.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Una vez que el código fuente de la biblioteca está accesible y puede compilarse
 en conjunto con el resto del proyecto, será necesario ajustar algunos parámetro
s de la compilación.
 En concreto, será necesario añadir algunos símbolos y rutas, que en DAVE,
 como en Eclipse IDE, puede hacerse de forma gráfica accediendo a las propiedade
s de compilación del proyecto.
 En el caso que nos ocupa, definiremos un símbolo DAVE, sin ningún valor
 específico, para usarlo como indicador de la plataforma cuando modifiquemos
 el código fuente de la biblioteca al portarla.
 Esto en GCC se consigue con el flag '-D'.
 También tendremos que indicar al compilador que busque archivos de cabecera
 en las rutas de la biblioteca (flag '-I').
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
herramienta 
\begin_inset Quotes fld
\end_inset

bibliotecas con referencias
\begin_inset Quotes frd
\end_inset

 de DAVE: Nos permite tener la biblioteca en una localización diferente
 a la del proyecto, haciéndose fácil su importación.
 Configuración de Símbolos?
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Adaptación de la biblioteca a la plataforma
\end_layout

\begin_layout Standard
Una vez importado el código de la biblioteca y configurada la compilación,
 pasaremos a realizar los cambios necesarios para que la esta pueda compilarse
 y ser funcional en la nueva plataforma.
 Puesto que mbedTLS selecciona la plataforma a través de directivas condicionale
s del preprocesador de C (#if #else), tendremos que modificar cada uno de
 los ficheros dependientes de la plataforma.
 Como explicamos en 
\begin_inset CommandInset ref
LatexCommand formatted
reference "subsec:Portabilidad-mbedTLS"

\end_inset

, los módulos dependientes de la plataforma y que deben ser portados son
 el módulo de red y la fuente de entropía.
 A continuación describimos los cambios realizados en cada uno de estos
 módulos.
\end_layout

\begin_layout Subsubsection
Módulo de red
\end_layout

\begin_layout Standard
Con respecto a las capacidades de red, mbedTLS se basa en los sockets BSD
 estándar, que es la interfaz de red predeterminada en muchos sistemas tipo
 Unix, así como lo es en Windows.
 Las versiones recientes de lwIP proporcionan esta interfaz de sockets estándar,
 por lo que se puede utilizar como la pila de red para el sistema.
\end_layout

\begin_layout Standard
Hemos modificado el fichero 
\family typewriter
net_sockets.c
\family default
, que es una capa de abstracción donde se interconecta mbedTLS con los sockets
 tipo BSD.
 Esta es la lista de cambios que hemos realizado en el fichero:
\end_layout

\begin_layout Itemize
Permitir compilar este archivo para un entorno distinto a Unix y MS
\begin_inset space ~
\end_inset

Windows, incluyendo directivas 
\family typewriter
#if
\family default
 al comiendo del fichero.
\end_layout

\begin_layout Itemize
Uso de la lwIP como la pila de red, incluyendo los ficheros de cabecera
 al comienzo de net_sockets.c.
 Bajo 
\family typewriter
#ifdef DAVE
\family default
.
\end_layout

\begin_layout Itemize
Deshabilitar IPv6 cuando esté definido el símbolo DAVE, ya que esta versión
 del protocolo aún no está soportado por lwIP.
\end_layout

\begin_layout Itemize
Uso de la implementación de la función 
\family typewriter
fcntl()
\family default
 provista por el kit de herrameintas arm-none-eabi.
\begin_inset Note Note
status open

\begin_layout Plain Layout
seguro que es arm-none-eabi?? no es newlib?
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Fuentes de entropía
\end_layout

\begin_layout Standard
Una buena entropía es la base fundamental para criptografía TLS robusta.
 Esta entropía puede obtenerse de diversas maneras.
 Los módulos de hardware que proporcionan entropía, como los módulos de
 generación de números (pseudo-) aleatorios (PRNG) está presente en muchos
 microcontroladores.
 El microcontrolador XMC4500 incluye uno de estos módulos PRNG como parte
 de los generadores de señal del módulo DAC.
 Utilizaremos este módulo como fuente principal de entropía en este proyecto.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/XMC4500-PRNG-block-diagram.eps
	width 60col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:XMC-PRNG-block-diagram"

\end_inset

Diagrama de bloques del generador de números pseudo aleatorios (PRNG) disponible
 en el XMC4500.
 
\begin_inset CommandInset citation
LatexCommand cite
key "infineon:XMC4500-reference"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
El PRNG presente en el XMC4500, cuyo diagrama de bloque puede consultarse
 en la 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:XMC-PRNG-block-diagram"

\end_inset

 genera números pseudoaleatorios de 12 bits.
 Para ello, utiliza un 
\emph on
registro de desplazamiento de realimentación lineal
\emph default
 (LFSR) de 20 bits que funciona a la frecuencia de reloj del sistema.
 Al recibir una señal de 
\emph on
trigger
\emph default
, el valor presente en el LFSR se copia al registro de salida, permaneciendo
 en este para su lectura por otro módulo.
 Cada vez que se reinicia el PRNG, el LFSR vuelve a su valor inicial y,
 por lo tanto, siempre se repite la misma secuencia de números pseudoaleatorios
 
\begin_inset CommandInset citation
LatexCommand cite
key "infineon:XMC4500-reference"

\end_inset

.
 A pesar de esto, hay tres factores que deberían garantizar una buena entropía
 en la implementación.
\end_layout

\begin_layout Enumerate
Existen muchos factores que hacen que el sistema no sea determinista, por
 lo que el momento en que se leen los números aleatorios es cada vez distinto.
 Entre estos factores podemos contar con el propio RTOS, que no garantiza
 que las tareas se ejecuten siempre en el mismo orden, o el hecho de que
 los tiempos de transmisión en la red sean cada vez distintos.
\end_layout

\begin_layout Enumerate
El PRNG forma parte del módulo DAC del microcontrolador, por lo que será
 necesario transformar la señal analógica generada a un número digital,
 a través de un ADC.
 Esta lectura está sujeta a pequeñas variaciones, pues la señal analógica
 generada se verá afectada por distintos ruidos, siempre presentes en los
 circuitos electrónicos #ref#.
 Además, usaremos una frecuencia relativamente alta en la generación de
 números aleatorios, de forma que el ADC no llegue a estabilizarse en la
 lectura y siempre cometa un error #ref:ADC necesita reposo#.
\end_layout

\begin_layout Enumerate
mbedTLS toma estos números aleatorios como una fuente de entropía, para
 luego combinarla con otras fuentes en el recolector de entropía.
 Esto se hace con la finalidad de asegurar una generación de números lo
 más aleatorios posibles.
 
\begin_inset CommandInset citation
LatexCommand cite
key "mbedTLS-add-entropy"

\end_inset

.
\end_layout

\begin_layout Standard
El uso del PRNG en el proyecto se ha llevado a cabo mediante el uso de diversad
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
DAVE APPs
\end_layout

\end_inset

, con las que hemos configurado uno de los módulos DAC para la generación
 de ruido y uno de los ADC para leer la señal generada.
\end_layout

\begin_layout Standard
Para integrar esta fuente de entropía en mbedTLS hemos modificado el fichero
 
\family typewriter
entropy_poll.c
\family default
, que contine las funciones de entropía definidas por el usuario para cada
 plataforma.
 En este fichero, hemos añadido una sección específica para la plataforma
 DAVE.
 En esta sección, simplemente hemos completado la función 
\family typewriter
mbedtls_hardware_poll()
\family default
 para que lea números aleatorios a partir del ADC.
\end_layout

\begin_layout Subsubsection
Módulo de temporización
\end_layout

\begin_layout Standard
Aunque este módulo no es un requisito para el funcionamiento de la biblioteca,
 será necesario a la hora de verificar la validez del certificado de AWS.
 Para integrar el RTC con mbedTLS, hemos creados los fichero 
\family typewriter
platform_DAVE.c
\family default
 y 
\family typewriter
platform_DAVE.h
\family default
, referenciándolos luego en 
\family typewriter
main.c
\family default
.
 Más concretamente, en la secuencia de inicialización llamamos a la función
 
\family typewriter
mbedtls_platform_set_time()
\family default
, pasándole como parámetro la función 
\family typewriter
mbedtls_time_DAVE()
\family default
 definida en 
\family typewriter
platform_DAVE.c
\family default
.
 Esta última función realiza una lectura del RTC del microcontrolador a
 través de la API definida en una 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
DAVE APP
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
La fecha y hora del RTC serán ajustadas gracias a un cliente NTP sencillo,
 que actualizará la hora periódicamente basándose en una lista de servidores.
 El código fuente de este cliente ha sido proporcionado por la empresa.
\end_layout

\begin_layout Subsection
Configuración de mbedTLS
\end_layout

\begin_layout Standard
Ciphersuites - configurados en config.h de mbedTLS para tener una versión
 mínima que compile y se ejecute.
\end_layout

\begin_layout Standard
Se ha usado una configuración mínima, a la que se han ido añadiendo característi
cas, para comprobar que los distintos elementos se han integrado correctamente
 en la plataforma.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
enseñar config? hablar de la configuración mínima?
\end_layout

\end_inset


\end_layout

\begin_layout Section
Resolución de problemas
\end_layout

\begin_layout Subsubsection
lwIP (Actualización de lwIP)
\end_layout

\begin_layout Standard
Versión de lwIP en DAVE.
 Versión requerida.
 Proceso de actualización (parches con git)
\end_layout

\begin_layout Standard
Se han usado parches y mucho git.
\end_layout

\begin_layout Section
Verificación de la integración
\end_layout

\begin_layout Subsection
Tests proporcionados 
\begin_inset Note Note
status open

\begin_layout Plain Layout
unitarios?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
para comprobar que los módulos de cifrado y tal funcionan correctamente.
 qué configuración se usan? tamaño de claves, etc.
\end_layout

\begin_layout Subsection
Test funcional
\end_layout

\begin_layout Standard
Se consigue crear comunicación cifrada entre un servidor sencillo basado
 en OpenSSL y un programa de ejemplo.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Explicar montaje en el laboratorio: miniGW, router, PC, Inet
\end_layout

\begin_layout Plain Layout
Se ha conseguido recibir una respuesta de servidores en Inet, viendo el
 HTTP 200 OK.
\end_layout

\begin_layout Plain Layout
Hablar de la estructura del programa:
\end_layout

\begin_layout Enumerate
Inicializar biblioteca?
\end_layout

\begin_layout Enumerate
Certificados en variables (fichero .c?)
\end_layout

\begin_layout Enumerate
Cargar certificados
\end_layout

\begin_layout Enumerate
Iniciar conexión
\end_layout

\begin_layout Enumerate
En cada paso se imprime por el puerto serial información útil.
 Si todo va bien, se imprime la respuesta del servidor.
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Implementación-AWS-IoT"

\end_inset

Integración de AWS IoT Device SDK
\end_layout

\begin_layout Section
Detalles de la biblioteca
\end_layout

\begin_layout Standard
El Device SDK de AWS IoT para C embebido es una colección de ficheros C
 diseñada para conectar aplicaciones embebidas a la nube de AWS IoT de forma
 segura.
 El SDK incluye clientes de la capa de transporte, implementaciones TLS
 y ejemplos de su uso.
 También da soporte a características específicas de AWS IoT, como una API
 para acceder al 
\lang english
Device Shadow service
\lang spanish
.
 Se distribuye en la forma de código fuente, de forma que deberá compilarse
 junto con la aplicación deseada, permitiendo la existencia de otras bibliotecas
 y RTOS 
\begin_inset CommandInset citation
LatexCommand cite
key "AWS-IoT-SDK"

\end_inset

.
\end_layout

\begin_layout Subsection
Estructura de ficheros
\end_layout

\begin_layout Standard
A continuación se presenta la estructura de ficheros del Device SDK para
 C embebido 
\begin_inset CommandInset citation
LatexCommand cite
key "AWS-IoT-SDK-porting-guide"

\end_inset

.
\end_layout

\begin_layout Description

\family typewriter
certs
\family default
 este directorio es en el que albergará los certificados digitales necesarios
 para la autenticación mutua entre el dispositivo y los servidores de AWS
 IoT.
 Aquí se almacenarán el certificado del cliente, su clave privada y la autoridad
 certificadora con la que se verificará la autenticidad del servidor.
\end_layout

\begin_layout Description

\family typewriter
docs
\family default
 documentación de la API del Device SDK.
\end_layout

\begin_layout Description

\family typewriter
external_libs
\family default
 código fuente de las bibliotecas de las que depende el Device SDK: mbedTLS
 y jsmn.
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
 El código fuente de jsmn siempre está presente.
 El código fuente de mbedTLS solo se incluyen cuando el SDK se descarga
 en formato tarball, por lo que debe incluirse en otro caso.
\end_layout

\end_inset


\end_layout

\begin_layout Description

\family typewriter
include
\family default
 este directorio contiene los archivos de cabecera (header files) que las
 aplicaciones deben incluir para hacer uso del Device SDK.
\end_layout

\begin_layout Description

\family typewriter
src
\family default
 este directorio contiene el código fuente del SDK, incluyendo la biblioteca
 MQTT, el código de la sombra de dispositivo (device shadow) y otras utilidades.
\end_layout

\begin_layout Description

\family typewriter
platform
\family default
 este directorio contiene los ficheros dependientes de la plataforma, tales
 como los temporizadores (timers), la implementación de TLS y la capa de
 concurrencia.
 Por defecto, el directorio incluye una implementación para Linux usando
 mbedTLS y pthread.
\end_layout

\begin_layout Description

\family typewriter
samples
\family default
 este directorio contiene algunos programas de ejemplo, así como sus makefiles.
 Entre estos programas, caben destacar dos ejemplos: el primero demuestra
 el uso de MQTT, a través de la suscripción y publicación en un canal de
 AWS IoT; el segundo muestra cómo interactuar con la sombra del dispositivo
 (device shadow).
\end_layout

\begin_layout Description

\family typewriter
tests
\family default
 contiene tests para verificar la funcionalidad del SDK.
\end_layout

\begin_layout Subsection
Portabilidad a otras plataformas
\end_layout

\begin_layout Standard
En esta sección, explicaremos los elementos del Device SDK que deben ser
 portados para hacer que este pueda ejecutarse en una nueva plataforma.
 Cabe destacar que las interfaces del SDK siguen el modelo de controlador,
 donde solo los prototipos están definidos por el Device SDK, mientras que
 la implementación corre a cargo del usuario del SDK, que deberá ajustarla
 a la plataforma en uso.
\end_layout

\begin_layout Standard
A continuación se presentan las funcionalidades necesarias para que el Device
 SDK se ejecute correctamente en una plataforma arbitraria 
\begin_inset CommandInset citation
LatexCommand cite
key "AWS-IoT-SDK-porting-guide"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Timer Functions [requerido]
\end_layout

\begin_layout Standard
El SDK necesita una implementación de temporizador para gestionar los tiempos
 de espera de las peticiones MQTT (como connect y subscribe, entre otros
 comandos), así como para el mantenimiento de la conexión (MQTT keep-alive
 pings).
 Los temporizadores deberán tener una resolución de milisegundos.
 Puesto que los temporizadores se consultan para comprobar si ha transcurrido
 un determinado intervalo de tiempo, es posible usar un contador de ejecución
 del tipo 
\begin_inset Quotes fld
\end_inset

milisegundos desde el inicio
\begin_inset Quotes frd
\end_inset

.
\end_layout

\begin_layout Subsubsection
Network Functions [requerido]
\end_layout

\begin_layout Standard
Para que la pila de clientes MQTT pueda comunicarse a través de la pila
 de protocolos TCP/IP utilizando una conexión TLS autenticada mutuamente,
 es necesario contar con una implementación de las funciones de red.
 Sin embargo, la biblioteca TLS proporciona generalmente la API para el
 socket TCP subyacente.
\end_layout

\begin_layout Subsubsection
Threading Functions
\end_layout

\begin_layout Standard
La capa de concurrencia proporciona la implementación de mutexes usados
 para operaciones 
\lang english
thread-safe
\lang spanish
.
 Aunque el cliente MQTT utiliza una máquina de estados para controlar las
 operaciones un un entorno multi-hebra, requiere la implementación de los
 mutexes para garantizar la seguridad de las hebras (thread safety).
 Esto no es necesario en los casos en que la seguridad de las hebras no
 es importante, por lo que está deshabilitado por defecto.
\end_layout

\begin_layout Section
Integración de AWS IoT SDK en el miniGW
\end_layout

\begin_layout Subsection
Importación de AWS IoT SDK al proyecto
\end_layout

\begin_layout Standard
Como con mbedTLS.
 Pero esta vez, pondremos mbedTLS dentro de SDK 
\begin_inset Note Note
status open

\begin_layout Plain Layout
no?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Entrega del trabajo a la empresa: copiar y pegar + aplicar parches, siguiendo
 tutorial
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Definición de una nueva plataforma
\end_layout

\begin_layout Standard
Lo que viene siendo portar...
\end_layout

\begin_layout Standard
Funciones que son en realidad wrappers, y que dependen de la plataforma.
 Se han tenido que portar:
\end_layout

\begin_layout Subsubsection
Temporizadores
\end_layout

\begin_layout Standard
Define the Timer Struct as in timer_platform.h
\end_layout

\begin_layout Standard
void init_timer(Timer *); init_timer - A timer structure is initialized
 to a clean state.
\end_layout

\begin_layout Standard
bool has_timer_expired(Timer *); has_timer_expired - a polling function
 to determine if the timer has expired.
\end_layout

\begin_layout Standard
void countdown_ms(Timer *, uint32_t); countdown_ms - set the timer to expire
 in x milliseconds and start the timer.
\end_layout

\begin_layout Standard
void countdown_sec(Timer *, uint32_t); countdown_sec - set the timer to
 expire in x seconds and start the timer.
\end_layout

\begin_layout Standard
uint32_t left_ms(Timer *); left_ms - query time in milliseconds left on
 the timer.
\end_layout

\begin_layout Subsubsection
Concurrencia
\end_layout

\begin_layout Standard
Define the IoT_Mutex_t Struct as in threads_platform.h This is used for data
 specific to the TLS library being used.
\end_layout

\begin_layout Standard
IoT_Error_t aws_iot_thread_mutex_init(IoT_Mutex_t *); Initialize the mutex
 provided as argument.
\end_layout

\begin_layout Standard
IoT_Error_t aws_iot_thread_mutex_lock(IoT_Mutex_t *); Lock the mutex provided
 as argument
\end_layout

\begin_layout Standard
IoT_Error_t aws_iot_thread_mutex_unlock(IoT_Mutex_t *); Unlock the mutex
 provided as argument.
\end_layout

\begin_layout Standard
IoT_Error_t aws_iot_thread_mutex_destroy(IoT_Mutex_t *); Destroy the mutex
 provided as argument.
\end_layout

\begin_layout Subsubsection
Conectividad de red
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
mbedTLS
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Define the TLSDataParams Struct as in network_platform.h This is used for
 data specific to the TLS library being used.
\end_layout

\begin_layout Standard
IoT_Error_t iot_tls_init(Network *pNetwork, char *pRootCALocation, char
 *pDeviceCertLocation, char *pDevicePrivateKeyLocation, char *pDestinationURL,
 uint16_t DestinationPort, uint32_t timeout_ms, bool ServerVerificationFlag);
 Initialize the network client / structure.
\end_layout

\begin_layout Standard
IoT_Error_t iot_tls_connect(Network *pNetwork, TLSConnectParams *TLSParams);
 Create a TLS TCP socket to the configure address using the credentials
 provided via the NewNetwork API call.
 This will include setting up certificate locations / arrays.
\end_layout

\begin_layout Standard
IoT_Error_t iot_tls_write(Network*, unsigned char*, size_t, Timer *, size_t
 *); Write to the TLS network buffer.
\end_layout

\begin_layout Standard
IoT_Error_t iot_tls_read(Network*, unsigned char*, size_t, Timer *, size_t
 *); Read from the TLS network buffer.
\end_layout

\begin_layout Standard
IoT_Error_t iot_tls_disconnect(Network *pNetwork); Disconnect API
\end_layout

\begin_layout Standard
IoT_Error_t iot_tls_destroy(Network *pNetwork); Clean up the connection
\end_layout

\begin_layout Standard
IoT_Error_t iot_tls_is_connected(Network *pNetwork); Check if the TLS layer
 is still connected
\end_layout

\begin_layout Subsection
Configuración de AWS IoT SDK
\end_layout

\begin_layout Standard
Como se vio en #(AWS IoT) es necesario que el dispositivo tenga algunos
 parámetros de AWS.
\end_layout

\begin_layout Standard
Open the aws_iot_config.h file and, in the //Get from console section, update
 the values for the following:
\end_layout

\begin_layout Standard
AWS_IOT_MQTT_HOST
\end_layout

\begin_layout Standard
Your personal endpoint.
 AWS_IOT_MY_THING_NAME
\end_layout

\begin_layout Standard
Your thing name.
 AWS_IOT_ROOT_CA_FILENAME
\end_layout

\begin_layout Standard
Your root CA certificate.
 AWS_IOT_CERTIFICATE_FILENAME
\end_layout

\begin_layout Standard
Your certificate.
 AWS_IOT_PRIVATE_KEY_FILENAME
\end_layout

\begin_layout Standard
Your private key.
\end_layout

\begin_layout Subsubsection
Certificado digital del dispositivo
\end_layout

\begin_layout Standard
Copiar certificado en un fichero .c (hardcoded) en formato .pem? .der?.
 
\end_layout

\begin_layout Subsubsection
Certificado digital para validar Amazon
\end_layout

\begin_layout Subsubsection
URL de 
\begin_inset Quotes fld
\end_inset

la sombra?
\begin_inset Quotes frd
\end_inset


\end_layout

\begin_layout Section
Resolución de problemas
\end_layout

\begin_layout Standard
Configuración de RTOS y opciones de compilación
\end_layout

\begin_layout Standard
Ciphersuites - configurados en config.h de mbedTLS para tener una versión
 compatible.
 o venía ya hecho?
\end_layout

\begin_layout Subsection
Configuración de CMSIS-RTOS
\end_layout

\begin_layout Standard
Más heap!
\end_layout

\begin_layout Subsection
Modificación del mapa de memoria
\end_layout

\begin_layout Standard
Se usa heap, ya que no es un sistema crítico.
 Hemos tenido que aumentar el tamaño del heap en el linkerscript
\end_layout

\begin_layout Standard
BigNum 
\begin_inset Note Note
status open

\begin_layout Plain Layout
es el culpable! -> Certificados con muchos bits! era eso, no?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Cómo era el linkerscript original? Bancos de memoria 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:XMC-block-diagram"

\end_inset

, cuánto espacio para qué cosa...
\end_layout

\begin_layout Plain Layout
Cómo se queda el linkerscript: cuánto espacio
\end_layout

\end_inset


\end_layout

\end_body
\end_document
